import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

df=pd.read_csv("data.csv")
df.head()
from google.colab import files

uploaded = files.upload()
df.tail()
df.info()
df.describe()
df.isnull().sum()
df["Age"].fillna(df["Age"].mean(),inplace=True)
df["Salary"].fillna(df["Salary"].mean(),inplace=True)
df["age"].fillna(df["age"].mean(),inplace=True)
df["salary"].fillna(df["salary"].mean(),inplace=True)
df.isnull().sum()
from sklearn.impute import SimpleImputer
x=df.iloc[:,:-1].values
x

y=df.iloc[:,3:].values
y
imp=SimpleImputer(missing_values=np.nan,strategy="mean")

x[:,1:3]=imp.fit_transform(x[:,1:3])
x
y
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
h=le.fit_transform(x[:,0])
h
y=le.fit_transform(y)
y
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
transform=ColumnTransformer([("norm1",OneHotEncoder(),[0])],remainder='passthrough')
x=transform.fit_transform(x)
x
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train[:,4:6]=sc.fit_transform(x_train[:,4:6])
x_train
plt.bar(df["country"],df["salary"])
plt.xlabel("country")
plt.ylabel("salary")
plt.show()
import seaborn as sns
sns.pairplot(df)
df
from sklearn.preprocessing import OneHotEncoder
import numpy as np

# Sample data
colors = np.array(['red', 'green', 'blue', 'red', 'blue']).reshape(-1, 1)

colors.shape
colors
encoder = OneHotEncoder()

# Fit and transform the data
one_hot_encoded = encoder.fit_transform(colors)
one_hot_encoded
# Convert the sparse matrix to a dense array for visualization
one_hot_encoded_array = one_hot_encoded.toarray()

# Display the one-hot encoded array
print(one_hot_encoded_array)

import seaborn as sns
import pandas as pd
import numpy as np

# Create a synthetic dataset
np.random.seed(0)
data = pd.DataFrame(np.random.randn(100, 4), columns=['A', 'B', 'C', 'D'])

# Add a categorical variable
data['Category'] = np.random.choice(['X', 'Y', 'Z'], 100)

# Visualize the pairwise relationships using pairplot
sns.pairplot(data)
